// # –ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. forEach

// ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// - `createProduct(obj, callback)` - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂
//   –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É
//   –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `id` —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// - `logProduct(product)` - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤
//   –∫–æ–Ω—Å–æ–ª—å
// - `logTotalPrice(product)` - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É
//   –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// ```js
// function logProduct(product) {
//     console.log(product);
// }
// function logTotalPrice(product) {
//     console.log(product.price * product.quantity);
// }
// function alertTotalPrice(product) {
//     alert(product.price * product.quantity);
// }

// function createProduct(obj, callback) {
//     let product = {
//         ...obj,
//         id: Math.random().toString(36).substring(2),
//     };
//     callback(product);
//     return product;
// }
// let product1 = { name: 'üçé', price: 30, quantity: 3 };
// let product2 = { name: 'üçã', price: 20, quantity: 5 };

// createProduct(product1, logProduct);
// createProduct(product1, logTotalPrice);

// createProduct(product2, logProduct);
// createProduct(product2, logTotalPrice);
// createProduct(product2, alertTotalPrice);
// ```

// ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç `account` –º–µ—Ç–æ–¥–∏ `withdraw(amount, onSuccess, onError)` —Ç–∞
// `deposit(amount, onSuccess, onError)`, –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞
// –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ `withdraw` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ
// this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –ú–µ—Ç–æ–¥ `deposit` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ
// –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// ```js
// // –†—ñ—à–µ–Ω–Ω—è
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//         onError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó');
//     } else if (amount > this.balance) {
//         onError('–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤');
//     } else {
//         this.balance -= amount;
//         onSuccess();
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//         onError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó');
//     } else if (amount <= 0) {
//         onError('–†–æ–∑–º—ñ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º');
//     } else {
//         this.balance += amount;
//         onSuccess();
//     }
//   },
// };

// function handleSuccess() {
//     console.log('–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
// }
// function handleError(errorMessage) {
//     console.error(errorMessage);
// }

// console.log('Balance before:', account.balance);

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(100, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// console.log('Balance after:', account.balance);
// ```

// ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é `each(array, callback)`, —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î
// –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
// –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

// ```js
// function each(array, callback) {
//     let newArray = [];
//     for (let item of array) {
//         newArray.push(callback(item));
//     }
//     return newArray;
// }

// function multiplyTwo(value) {
//     return value * 2;
// }
// function minus10(value) {
//     return value - 10;
// }
// function getSqrt(value) {
//     return Math.sqrt(value);
// }
// function ceil(value) {
//     return Math.ceil(value);
// }
// function floor(value) {
//     return Math.floor(value);
// }

// let originalArray = [64, 49, 36, 25, 16];
// console.log('originalArray', originalArray);

// let multipliedArray = each(originalArray, multiplyTwo);
// console.log('multipliedArray', multipliedArray);

// console.log('minus10:', each(originalArray, minus10));
// console.log('getSqrt:', each(originalArray, getSqrt));

// let originalArray2 = [1.5, 2.1, 16.4, 9.7, 11.3];
// console.log('originalArray2', originalArray2);

// console.log('ceil:', each(originalArray2, ceil));
// console.log('floor:', each(originalArray2, floor));
// ```

// ## Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É Example 1 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js
// function createProduct(obj, callback) {
//     let product = {
//         ...obj,
//         id: Math.random().toString(36).substring(2),
//     };
//     callback(product);
//     return product;
// }
// let product1 = { name: 'üçé', price: 30, quantity: 3 };
// let product2 = { name: 'üçã', price: 20, quantity: 5 };

// createProduct(product1, value => console.log(value));
// createProduct(product1, value => console.log(value.price * value.quantity));

// createProduct(product2, value => console.log(value));
// createProduct(product2, value => console.log(value.price * value.quantity));
// createProduct(product2, value => alert(value.price * value.quantity));
// ```

// ## Example 5 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É Example 3 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js
// function each(array, callback) {
//     let newArray = [];
//     for (let item of array) {
//         newArray.push(callback(item));
//     }
//     return newArray;
// }

// let originalArray = [64, 49, 36, 25, 16];
// console.log('originalArray', originalArray);

// let multipliedArray = each(originalArray, value => value * 2);
// console.log('multipliedArray', multipliedArray);

// console.log('minus10:', each(originalArray, value => value - 10));
// console.log('getSqrt:', each(originalArray, value => Math.sqrt(value)));

// let originalArray2 = [1.5, 2.1, 16.4, 9.7, 11.3];
// console.log('originalArray2', originalArray2);

// console.log('ceil:', each(originalArray2, value => Math.ceil(value)));
// console.log('floor:', each(originalArray2, value => Math.floor(value)));
// ```

// ## Example 6 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
// function logItems(items) {
//     console.log(items);
//     items.forEach((element, index) => {
//         console.log(`${index + 1} - ${element}`);
//     });
// }

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
// ```

// ## Example 7 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
// function printContactsInfo({ names, phones }) {
//   const nameList = names.split(',');
//   const phoneList = phones.split(',');
//   nameList.forEach((item, i) => {
//     console.log(`${nameList[i]}: ${phoneList[i]}`);
//   });
// }

// printContactsInfo({
//   names: 'Jacob,William,Solomon,Artemis',
//   phones: '89001234567,89001112233,890055566377,890055566300',
// });
// ```

// ## Example 8 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
// function cal—ÅulateAverage(...args) {
//   let total = 0;
//   args.forEach(item => total += item);
//   return total / args.length;
// }

// console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
// ```
